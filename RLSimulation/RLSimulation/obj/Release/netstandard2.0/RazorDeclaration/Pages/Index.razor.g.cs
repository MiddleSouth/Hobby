#pragma checksum "D:\MyProgram\Hobby\RLSimulation\RLSimulation\Pages\Index.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "29f7ee2086be8e0a3ad0cf2322edead52439ac0f"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace RLSimulation.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#line 1 "D:\MyProgram\Hobby\RLSimulation\RLSimulation\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#line 2 "D:\MyProgram\Hobby\RLSimulation\RLSimulation\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#line 3 "D:\MyProgram\Hobby\RLSimulation\RLSimulation\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#line 4 "D:\MyProgram\Hobby\RLSimulation\RLSimulation\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#line 5 "D:\MyProgram\Hobby\RLSimulation\RLSimulation\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#line 6 "D:\MyProgram\Hobby\RLSimulation\RLSimulation\_Imports.razor"
using RLSimulation;

#line default
#line hidden
#line 7 "D:\MyProgram\Hobby\RLSimulation\RLSimulation\_Imports.razor"
using RLSimulation.Shared;

#line default
#line hidden
#line 3 "D:\MyProgram\Hobby\RLSimulation\RLSimulation\Pages\Index.razor"
using RLSimulation.Data;

#line default
#line hidden
#line 4 "D:\MyProgram\Hobby\RLSimulation\RLSimulation\Pages\Index.razor"
using System.Timers;

#line default
#line hidden
    [Microsoft.AspNetCore.Components.RouteAttribute("/")]
    public class Index : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#line 169 "D:\MyProgram\Hobby\RLSimulation\RLSimulation\Pages\Index.razor"
 
	private Maze EnvMaze;
	private QLearningAgent Agent;
	private Timer ActTimer;
	private int MazeWidth = 15;
	private int MazeHeight = 15;
	private double GoalReword = 100;
	private double Alpha = 0.1;
	private double Gamma = 0.9;
	private double Epsilon = 0.03;
	private int SkipActCount = 10;
	private int SkipGoalCount = 1;
	private bool IsStopWhenGoal = true;
	private bool IsStopWhenBestRoot = true;
	private Dictionary<Maze.Direction, string> DirectionSet = new Dictionary<Maze.Direction, string>()
	{
		{Maze.Direction.Up,   "↑" },
		{Maze.Direction.Down, "↓" },
		{Maze.Direction.Left, "←" },
		{Maze.Direction.Right,"→" }
	};

	/// <summary>
	/// 初期表示時
	/// </summary>
	/// <returns></returns>
	protected override async Task OnInitializedAsync()
	{
		EnvMaze = await mazeService.GetMazeAsync();
		CreateMaze();
	}

	/// <summary>
	/// ボタン押下時の迷路生成
	/// </summary>
	private void CreateMaze()
	{
		EnvMaze.CreateMaze(Maze.CreateMethod.ExtendWall, MazeWidth, MazeHeight);
	}

	/// <summary>
	/// 学習開始
	/// </summary>
	private void StartLearning()
	{
		if(Agent == null)
		{
			SetAgent();
		}

		if(EnvMaze.Cells[Agent.CurrentLocate.X, Agent.CurrentLocate.Y].IsGoal)
		{
			Agent.SetStart();
		}

		if(ActTimer == null)
		{
			ActTimer = new Timer(50);
			ActTimer.Elapsed += (sender, e) =>
			{
				ActAgentAsync().Wait();
			};
		}

		ActTimer.Start();
	}

	/// <summary>
	/// 学習一時停止
	/// </summary>
	private void StopLearning()
	{
		if(ActTimer != null)
		{
			ActTimer.Stop();
		}
	}

	/// <summary>
	/// 指定回数行動を進める
	/// </summary>
	private void SkipActions()
	{
		if(ActTimer == null)
		{
			return;
		}

		ActTimer.Stop();

		for(int i = 0; i < SkipActCount; i++)
		{
			ActAgent();

			if (EnvMaze.Cells[Agent.CurrentLocate.X, Agent.CurrentLocate.Y].IsGoal)
			{
				Agent.SetStart();
				break;
			}
		}

		ActTimer.Start();
	}

	/// <summary>
	/// 指定回数ゴールするまで行動する
	/// </summary>
	private void SkipGoals()
	{
		if(ActTimer == null)
		{
			return;
		}

		ActTimer.Stop();

		for(int i = 0; i < SkipGoalCount; i++)
		{
			while (true)
			{
				ActAgent();

				if (EnvMaze.Cells[Agent.CurrentLocate.X, Agent.CurrentLocate.Y].IsGoal)
				{
					Agent.SetStart();
					break;
				}
			}
		}

		ActTimer.Start();
	}

	/// <summary>
	/// エージェントを削除する
	/// </summary>
	private void ClearAgent()
	{
		Agent = null;
		ActTimer.Stop();
		ActTimer.Dispose();
		ActTimer = null;
	}

	/// <summary>
	/// エージェントの行動
	/// </summary>
	/// <returns></returns>
	private async Task ActAgentAsync()
	{
		await InvokeAsync(() =>
		{

			if (EnvMaze.Cells[Agent.CurrentLocate.X, Agent.CurrentLocate.Y].IsGoal)
			{
				Agent.SetStart();
			}
			else
			{
				ActAgent();
				this.StateHasChanged();
				if (IsStopWhenGoal && EnvMaze.Cells[Agent.CurrentLocate.X, Agent.CurrentLocate.Y].IsGoal)
				{
					ActTimer.Stop();
				}
			}
		});
	}

	/// <summary>
	/// エージェントを1回行動させる
	/// </summary>
	private void ActAgent()
	{
		var locate = new Maze.CellLocate(Agent.CurrentLocate);
		double qValue = Agent.Act();

		if(qValue > 0)
		{
			Maze.Direction direction = Agent.MaxQDirection(locate);
			EnvMaze.Cells[locate.X, locate.Y].Text = DirectionSet[direction];
		}
	}

	/// <summary>
	/// エージェントを設定する
	/// </summary>
	private void SetAgent()
	{
		EnvironmentMaze env = new EnvironmentMaze(EnvMaze, GoalReword);
		Agent = new QLearningAgent(env, Alpha, Gamma, Epsilon);
	}

#line default
#line hidden
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private MazeService mazeService { get; set; }
    }
}
#pragma warning restore 1591
